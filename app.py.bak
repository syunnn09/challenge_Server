from flask import Flask, request, send_file, Response
from PIL import Image
import io
import numpy as np
import torch
from cyclegan.cyclegan import Generator
import logging

app = Flask(__name__)
logging.basicConfig(level=logging.INFO)

MODEL_PATH = {
   'statue_to_human': 'models/model_generator_AB_246.pth',
   'human_to_statue': 'models/model_generator_BA_246.pth'
}

statue_to_human = Generator()
human_to_statue = Generator()

statue_to_human.load_state_dict(torch.load(MODEL_PATH['statue_to_human'], map_location=torch.device('cpu')))
human_to_statue.load_state_dict(torch.load(MODEL_PATH['human_to_statue'], map_location=torch.device('cpu')))

statue_to_human.eval()
human_to_statue.eval()

def preprocess_image(img):
   img = torch.from_numpy(img.transpose((2, 0, 1))).float()
   img = img.unsqueeze(0) / 255.0
   img = (img - 0.5) / 0.5
   return img

def postprocess_image(tensor):
   img = (tensor + 1) / 2
   img = img.squeeze().detach().numpy()
   img = img.transpose(1, 2, 0) * 255.0
   return img

@app.route('/transform', methods=['POST'])
def transform_image():
   try:
       raw_data = request.get_data()
       content_type = request.headers.get('Content-Type', '')
       if not content_type.startswith('multipart/form-data'):
           return 'Invalid Content-Type', 400
           
       boundary = content_type.split('boundary=')[-1].encode()
       parts = raw_data.split(boundary)
       
       for part in parts:
           if b'filename' in part and b'image.jpg' in part:
               idx = part.find(b'\r\n\r\n')
               if idx == -1:
                   continue
                   
               image_data = part[idx+4:]
               if image_data.endswith(b'\r\n'):
                   image_data = image_data[:-2]
               
               img = Image.open(io.BytesIO(image_data))
               if img.mode != 'RGB':
                   img = img.convert('RGB')
               
               img_array = np.array(img)
               img_tensor = preprocess_image(img_array)
               
               with torch.no_grad():
                   transformed_tensor = statue_to_human(img_tensor)
               
               transformed_array = postprocess_image(transformed_tensor)
               transformed_img = Image.fromarray(transformed_array.astype('uint8'))
               
               img_byte_arr = io.BytesIO()
               transformed_img.save(img_byte_arr, format='PNG')
               img_byte_arr.seek(0)
               
               response = send_file(
                   img_byte_arr,
                   mimetype='image/png',
                   as_attachment=True,
                   download_name='transformed.png'
               )
               response.headers['Access-Control-Allow-Origin'] = '*'
               return response
               
       return 'No image found in request', 400
       
   except Exception as e:
       logging.error(f"Error processing image: {str(e)}")
       return str(e), 500

@app.route('/health', methods=['GET'])
def health_check():
   return 'OK', 200

if __name__ == '__main__':
   app.run(host='0.0.0.0', port=50000, debug=True)